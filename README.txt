===============================================================================
üå§Ô∏è PREDICTOR DE CLIMA A PRIORI - INSTRUCCIONES DE USO
===============================================================================

Proyecto: BIY7121_EV3_Clustering_RiquelmeFrancisco_MarceloLeandro_Hern√°ndezV√≠ctor
Fecha: 2024
Modelo: Algoritmo A PRIORI para combinaciones clim√°ticas

===============================================================================
üìÅ ESTRUCTURA DEL PROYECTO
===============================================================================

‚îú‚îÄ‚îÄ app.py                     # API Flask con el modelo A PRIORI
‚îú‚îÄ‚îÄ modelo_entrenado.pkl       # Modelo serializado (generado autom√°ticamente)
‚îú‚îÄ‚îÄ entrenamiento_modelo.ipynb # Notebook para entrenar el modelo
‚îú‚îÄ‚îÄ index.html                 # Interfaz web que consume la API
‚îú‚îÄ‚îÄ ejemplo.csv                # Archivo CSV de prueba
‚îî‚îÄ‚îÄ README.txt                 # Este archivo de instrucciones

===============================================================================
üîß REQUISITOS PREVIOS
===============================================================================

1. Python 3.8 o superior
2. Pip (gestor de paquetes de Python)
3. Navegador web moderno (Chrome, Firefox, Safari, Edge)

===============================================================================
üì¶ INSTALACI√ìN DE DEPENDENCIAS
===============================================================================

1. Abrir terminal/consola de comandos
2. Navegar al directorio del proyecto
3. Ejecutar el siguiente comando:

   pip install flask flask-cors pandas numpy scikit-learn mlxtend joblib

   O alternativamente, si tienes un archivo requirements.txt:
   pip install -r requirements.txt

===============================================================================
üöÄ PASOS PARA EJECUTAR EL SISTEMA
===============================================================================

PASO 1: ENTRENAR EL MODELO
--------------------------
1. Abrir el archivo 'entrenamiento_modelo.ipynb' en Jupyter Notebook
2. Ejecutar todas las celdas del notebook
3. Esto generar√° el archivo 'modelo_entrenado.pkl' autom√°ticamente

PASO 2: INICIAR LA API
----------------------
1. Abrir terminal en el directorio del proyecto
2. Ejecutar el comando:
   python app.py
   
3. Deber√≠as ver un mensaje similar a:
   "üöÄ Iniciando API en puerto 5000"
   "üìä Modelo disponible: ‚úÖ"
   
4. La API estar√° disponible en: http://localhost:5000

PASO 3: VERIFICAR LA API
------------------------
1. Abrir navegador web
2. Ir a: http://localhost:5000
3. Deber√≠as ver la p√°gina de informaci√≥n de la API
4. Para verificar el estado: http://localhost:5000/health

PASO 4: USAR LA INTERFAZ WEB
----------------------------
1. Abrir el archivo 'index.html' en tu navegador web
2. Verificar que la URL de la API est√© configurada como: http://localhost:5000
3. Cargar el archivo 'ejemplo.csv' usando el bot√≥n "Seleccionar archivo CSV"
4. Hacer clic en "Procesar Datos"
5. Hacer clic en "Generar Predicciones"
6. Ver los resultados en gr√°ficos y tablas

===============================================================================
üìä FORMATO DE DATOS CSV
===============================================================================

El archivo CSV debe contener las siguientes columnas:
- MaxTemp: Temperatura m√°xima del d√≠a (¬∞C)
- Humidity3pm: Humedad a las 3 PM (%)
- WindGustSpeed: Velocidad m√°xima del viento (km/h)
- Sunshine: Horas de sol (horas)

Ejemplo de formato:
MaxTemp,Humidity3pm,WindGustSpeed,Sunshine
22.9,22.0,44.0,7.04
25.1,25.0,44.0,8.7
...

===============================================================================
üîß CONFIGURACI√ìN AVANZADA
===============================================================================

CAMBIAR PUERTO DE LA API:
- Modificar la l√≠nea final de app.py
- Cambiar: app.run(host='0.0.0.0', port=5000)
- Por: app.run(host='0.0.0.0', port=PUERTO_DESEADO)

HABILITAR MODO DEBUG:
- Ejecutar: python app.py
- O establecer variable de entorno: export DEBUG=true

CONFIGURAR PARA PRODUCCI√ìN:
- Usar un servidor WSGI como Gunicorn
- Comando: gunicorn -w 4 -b 0.0.0.0:5000 app:app

===============================================================================
üß™ PRUEBAS Y VALIDACI√ìN
===============================================================================

PROBAR LA API DIRECTAMENTE:
1. Usar curl o Postman
2. Endpoint: POST http://localhost:5000/predict
3. Body JSON:
   {
     "MaxTemp": 25.5,
     "Humidity3pm": 60.0,
     "WindGustSpeed": 35.0,
     "Sunshine": 8.5
   }

PROBAR CON LOTE DE DATOS:
1. Endpoint: POST http://localhost:5000/predict_batch
2. Body JSON:
   {
     "data": [
       {"MaxTemp": 25.5, "Humidity3pm": 60.0, "WindGustSpeed": 35.0, "Sunshine": 8.5},
       {"MaxTemp": 30.0, "Humidity3pm": 40.0, "WindGustSpeed": 50.0, "Sunshine": 12.0}
     ]
   }

===============================================================================
üìà INTERPRETACI√ìN DE RESULTADOS
===============================================================================

M√âTRICAS PRINCIPALES:
- Soporte: Frecuencia de aparici√≥n de una combinaci√≥n
- Confianza: Probabilidad de que ocurra la consecuencia dado el antecedente
- Lift: Cu√°ntas veces es m√°s probable que ocurra la combinaci√≥n vs. al azar

VALORES T√çPICOS:
- Confianza > 0.5 (50%): Regla confiable
- Lift > 1.0: Correlaci√≥n positiva
- Lift = 1.0: Independencia estad√≠stica
- Lift < 1.0: Correlaci√≥n negativa

===============================================================================
üêõ SOLUCI√ìN DE PROBLEMAS
===============================================================================

ERROR: "Modelo no disponible"
- Verificar que existe el archivo 'modelo_entrenado.pkl'
- Ejecutar el notebook de entrenamiento completo

ERROR: "Port already in use"
- Cambiar el puerto en app.py
- O cerrar la aplicaci√≥n que est√© usando el puerto 5000

ERROR: "CORS policy"
- Verificar que flask-cors est√© instalado
- La API ya incluye configuraci√≥n CORS

ERROR: "File not found"
- Verificar que todos los archivos est√©n en el mismo directorio
- Revisar permisos de archivos

===============================================================================
üí° CONSEJOS Y MEJORES PR√ÅCTICAS
===============================================================================

1. DATOS DE ENTRADA:
   - Usar valores realistas para las variables clim√°ticas
   - Verificar que no haya valores nulos o extremos
   - El modelo funciona mejor con datos dentro de rangos normales

2. INTERPRETACI√ìN:
   - Enfocarse en reglas con alta confianza (>0.7)
   - Considerar el lift para evaluar la fuerza de la asociaci√≥n
   - Analizar las combinaciones frecuentes para identificar patrones

3. RENDIMIENTO:
   - Para datasets grandes, procesar en lotes peque√±os
   - Limitar las predicciones a ~100 registros por solicitud
   - Usar el endpoint /predict para casos individuales

===============================================================================
üìû SOPORTE Y CONTACTO
===============================================================================

En caso de problemas t√©cnicos:
1. Revisar los logs de la API en la consola
2. Verificar que todas las dependencias est√©n instaladas
3. Consultar la documentaci√≥n de la API en http://localhost:5000

Desarrollado por:
- Francisco Riquelme
- Leandro Marcelo  
- V√≠ctor Hern√°ndez

Curso: BIY7121 - Evaluaci√≥n N¬∞3
Fecha: 2024

===============================================================================
üéØ OBJETIVOS DE APRENDIZAJE CUMPLIDOS
===============================================================================

‚úÖ Puesta en producci√≥n de modelo de Machine Learning
‚úÖ Creaci√≥n de API REST con Flask
‚úÖ Consumo de API desde interfaz web
‚úÖ Visualizaci√≥n din√°mica de resultados
‚úÖ Manejo de datos CSV en tiempo real
‚úÖ Implementaci√≥n de modelo A PRIORI
‚úÖ An√°lisis de reglas de asociaci√≥n
‚úÖ Interpretaci√≥n de m√©tricas de miner√≠a de datos

===============================================================================